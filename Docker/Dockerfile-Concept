Dockerfile?
A Dockerfile is a script that contains instructions to build a Docker image — a lightweight, portable container that includes everything your application needs to run:
    •	Operating system base (Ubuntu, Alpine, etc.)
    •	Language runtime (Python, Java, Node)
    •	Application code
    •	Dependencies and configurations
__________________________________________
Step-by-Step: How to Write a Dockerfile
Let’s go through the general steps for writing one:
1.	Choose a Base Image
    o	e.g., python:3.12, openjdk:17, node:20, or ubuntu:22.04
2.	Set Working Directory
    o	So commands and paths are relative and clean.
3.	Copy Your Application Files
    o	Copy source code or config files into the image.
4.	Install Dependencies
    o	Use RUN for OS-level or language-level installs.
5.	Expose Ports
    o	If your app listens on a port, expose it.
6.	Define Entrypoint or Command
    o	The default process to run when the container starts.
7.	Optimize
    o	Use .dockerignore
    o	Use multi-stage builds
    o	Minimize layers and image size
________________________________________
🐍 Example 1 — Python App
Project structure:
    my-python-app/
    ├── app.py
    ├── requirements.txt
    └── Dockerfile
Dockerfile:
    # 1. Use official Python image
    FROM python:3.12-slim
    # 2. Set work directory
    WORKDIR /app
    # 3. Copy requirements first (for caching)
    COPY requirements.txt .
    # 4. Install dependencies
    RUN pip install --no-cache-dir -r requirements.txt
    # 5. Copy rest of the code
    COPY . .
    # 6. Expose port (if running a web app)
    EXPOSE 8000
    # 7. Default command
    CMD ["python", "app.py"]
Build and Run:
    docker build -t my-python-app .
    docker run -p 8000:8000 my-python-app
________________________________________
☕ Example 2 — Java Application (Spring Boot)
Project structure:
    my-java-app/
    ├── target/myapp.jar
    └── Dockerfile

Dockerfile:
    # Stage 1: Build
    FROM maven:3.9.9-eclipse-temurin-17 AS build
    WORKDIR /app
    COPY pom.xml .
    COPY src ./src
    RUN mvn clean package -DskipTests
    
    # Stage 2: Run
    FROM eclipse-temurin:17-jdk
    WORKDIR /app
    COPY --from=build /app/target/myapp.jar myapp.jar
    EXPOSE 8080
    ENTRYPOINT ["java", "-jar", "myapp.jar"]
Key Concept:
This uses multi-stage build — builds in one image (with Maven) and runs in a smaller runtime image (only JDK).
________________________________________
🌐 Example 3 — Node.js Application

Project structure:
    my-node-app/
    ├── package.json
    ├── package-lock.json
    ├── server.js
    └── Dockerfile

Dockerfile:
    FROM node:20-alpine
    WORKDIR /usr/src/app
    COPY package*.json ./
    RUN npm ci --only=production
    COPY . .
    EXPOSE 3000
    CMD ["node", "server.js"]
________________________________________
🧰 Example 4 — RPM or OS Package-based App
Let’s say you want to create an image with a custom app or service installed via yum or dnf.
    FROM rockylinux:9
    # Install packages
    RUN dnf install -y nginx vim && \
        dnf clean all
    # Copy config file
    COPY nginx.conf /etc/nginx/nginx.conf
    EXPOSE 80
    CMD ["nginx", "-g", "daemon off;"]
Key Notes:
    •	For RHEL/CentOS/Rocky → use dnf or yum
    •	Always clean cache after installation to reduce image size.
________________________________________
🕹️ Example 5 — Third-party Service (like Nginx or MySQL)
A. Simple Nginx Setup
    FROM nginx:latest
    # Copy static website files
    COPY ./html /usr/share/nginx/html
    EXPOSE 80
    # Default command provided by base image

B. Custom Nginx Config
    FROM nginx:1.27-alpine
    COPY nginx.conf /etc/nginx/nginx.conf
    COPY ./html /usr/share/nginx/html
    EXPOSE 80
________________________________________
🧠 Best Practices
    ✅ Use small base images (alpine, slim, distroless)
    ✅ Use .dockerignore to skip unnecessary files (like .git, node_modules)
    ✅ Pin versions (e.g., python:3.12.3)
    ✅ Minimize layers — combine related RUN commands
    ✅ Don’t run as root — add a non-root user for security
    ✅ Use multi-stage builds to reduce final image size
    ✅ Leverage caching — copy dependencies before code
________________________________________
🧩 Summary Cheat Sheet
Stack        Base Image	        Build Tool	    Run Command
Python       python:3.x-slim	pip install	    CMD ["python", "app.py"]
Java         eclipse-temurin:17	mvn package	    ENTRYPOINT ["java", "-jar", "app.jar"]
Node.js      node:20-alpine	    npm install	    CMD ["node", "server.js"]
RPM Apps     rockylinux:9	    dnf install	    CMD ["nginx", "-g", "daemon off;"]
Nginx        nginx:alpine	    Copy config	    Default provided
